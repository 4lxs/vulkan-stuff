#pragma once

#include <vulkan/vulkan.h>

#include <array>
#include <expected>
#include <glm/glm.hpp>
#include <optional>
#include <string_view>
#include <vector>

#include "struct.hpp"

constexpr std::string_view TRIANGLE_TEXTURE_PATH = "textures/texture.jpg";

class TriangleObject {
 public:
  TriangleObject() = default;
  ~TriangleObject();

  void build_pipeline();
  void draw(VkCommandBuffer cmd);
  void init_data();

 private:
  struct PushConstants {
    glm::mat4 mvp;
    glm::vec3 col;
  };

  const std::vector<Vertex> _vertexData{
      {{-0.5, -0.5, 0}, {1., 0., 0., 1.}, {1., 0.}},
      {{0.5, -0.5, 0}, {0., 1., 0., 1.}, {0., 0.}},
      {{0.5, 0.5, 0}, {0., 0., 1., 1.}, {0., 1.}},
      {{-0.5, 0.5, 0}, {1., 1., 1., 1.}, {1., 1.}},

      // // clang-format off
      // {{-1., -1., -1.}, {0.583,  0.771,  0.014, 1.}},
      // {{-1., -1., 1.},  {0.609,  0.115,  0.436, 1.}},
      // {{-1., 1., 1.},   {0.327,  0.483,  0.844, 1.}},
      // {{1., 1., -1.},   {0.822,  0.569,  0.201, 1.}},
      // {{-1., -1., -1.}, {0.435,  0.602,  0.223, 1.}},
      // {{-1., 1., -1.},  {0.310,  0.747,  0.185, 1.}},
      // {{1., -1., 1.},   {0.597,  0.770,  0.761, 1.}},
      // {{-1., -1., -1.}, {0.559,  0.436,  0.730, 1.}},
      // {{1., -1., -1.},  {0.359,  0.583,  0.152, 1.}},
      // {{1., 1., -1.},   {0.483,  0.596,  0.789, 1.}},
      // {{1., -1., -1.},  {0.559,  0.861,  0.639, 1.}},
      // {{-1., -1., -1.}, {0.195,  0.548,  0.859, 1.}},
      // {{-1., -1., -1.}, {0.014,  0.184,  0.576, 1.}},
      // {{-1., 1., 1.},   {0.771,  0.328,  0.970, 1.}},
      // {{-1., 1., -1.},  {0.406,  0.615,  0.116, 1.}},
      // {{1., -1., 1.},   {0.676,  0.977,  0.133, 1.}},
      // {{-1., -1., 1.},  {0.971,  0.572,  0.833, 1.}},
      // {{-1., -1., -1.}, {0.140,  0.616,  0.489, 1.}},
      // {{-1., 1., 1.},   {0.997,  0.513,  0.064, 1.}},
      // {{-1., -1., 1.},  {0.945,  0.719,  0.592, 1.}},
      // {{1., -1., 1.},   {0.543,  0.021,  0.978, 1.}},
      // {{1., 1., 1.},    {0.279,  0.317,  0.505, 1.}},
      // {{1., -1., -1.},  {0.167,  0.620,  0.077, 1.}},
      // {{1., 1., -1.},   {0.347,  0.857,  0.137, 1.}},
      // {{1., -1., -1.},  {0.055,  0.953,  0.042, 1.}},
      // {{1., 1., 1.},    {0.714,  0.505,  0.345, 1.}},
      // {{1., -1., 1.},   {0.783,  0.290,  0.734, 1.}},
      // {{1., 1., 1.},    {0.722,  0.645,  0.174, 1.}},
      // {{1., 1., -1.},   {0.302,  0.455,  0.848, 1.}},
      // {{-1., 1., -1.},  {0.225,  0.587,  0.040, 1.}},
      // {{1., 1., 1.},    {0.517,  0.713,  0.338, 1.}},
      // {{-1., 1., -1.},  {0.053,  0.959,  0.120, 1.}},
      // {{-1., 1., 1.},   {0.393,  0.621,  0.362, 1.}},
      // {{1., 1., 1.},    {0.673,  0.211,  0.457, 1.}},
      // {{-1., 1., 1.},   {0.820,  0.883,  0.371, 1.}},
      // {{1., -1., 1.},   {0.982,  0.099,  0.879, 1.}},
      // // clang-format on
  };

  const std::vector<uint32_t> _indexData = {0, 1, 2, 2, 3, 0};

  VkPipeline _pipeline{};
  VkPipelineLayout _pipelineLayout{};
  VkDeviceAddress _vertexBufferAddress{};
  std::optional<GPUMeshBuffers> _meshBuffers;
};
